
1) Introduction
===============    
         
1) what is JS?

   JS is a programing language which is used to develop dynamic web and mobile apps.

   By using JS we can manipulate (add, update, delete) DOM.

   By using JS we can perform validations.

2) What is ES?

   Ecma Script is a specification for JS.

3) What is nodejs? 
   
   Node js is a run time environment for JS.
   By using nodejs we can create APIs.
   Node js is not a programing lanaguage.
   Node js is not a library.
   Node js is not a framework.  
   

2) Setup Development environment?
   =============================

  

  2) Front-end

    - We need a Browser (Chrome).
    - We need an IDE to write code (vs code).
    - We need a HTML file to run js code in front-end. 
    - Every browser has js engine in it to run js code. 

  3) Back-end

    - We need to install Nodejs to run js code in back-end.
    - We need an IDE to write code. 
    - Nodejs is a runtime environment for js.
    - By using nodejs js we can create APIs.
    - How to run js file in nodejs

     => node filenane



3) Basics 
=========

=> When to store data?
 
   We need to store data in memory, when there is need in app.

=> How to store data in memory?
 
   By using var, let, const, we can store data in memory. 
   We can perform some operations on the data which is stored in memory 
                          

=> What to store in memory? 

   We have to store values (data) by using data types. These are the real values to do any functionality.

1) variables (we need variables to manipulate/perform some operation/update/delete/save)

   We will declare variables by using var, let, const keywords.

2) data types

    Primitive data types: we use primitives data types to store single value in memory.
    --------------------

    Note: All primitive data types will store value directly in memory.

    1) string: 

       String is collection of characters to be stored in memory. 
       By using '' "" `` we can store string in memory.

    2) number: 

       We can store numbers in memory by using number data type. 
       whether it is integer or float number.
 
    3) boolean: 

       We can store true or false in memory by using boolean datatype.

    4) undefined:
 
       undefined means a variable has been declared but it's value has not been assigned. 

    5) null: 

       Null means an empty value. The variable which has been assigned as null contains no value.


   Reference data types: we use reference data types to store multiple values in memory location.
   --------------------

   Note: All reference data types will store value somewhere in memory location. The stored memory location address will be stored in main memory.

    1) Object:

      By using object we can store multiple values in single memory location in the form of key & value pair.
    
      By using dot operator we can access the object values in app.
  
      Objects are often used to model real-world entities such as a person, car, or any other entity that has properties and behaviors.

      
    2) Array:
   
      By using array we can store collection of values in single memory location. It stores only values. Internally js attaches index numbers to the values in array. By using index numbers we can access array values in app.
 
    3) Function:

    - Funtion is block of code. By using a function we can do some task and return some value.
    - For every function call seperate excution context will be created. 
    - For every excution context, there are memory creation phase and code excution phase. 
    - We can stores multiple values in functional scope. 
      

   ES-6
   ----
   4) Map
   5) WeakMap
   6) Set
   7) WeakSet

3) typeOf operator 

  - By using typeof operator we can find data type for the value which is stored in memory.

    value : datatype
    ------  --------

   'sachin': string
   40: number
   true/false: boolean
   undefined: undefined
   null: object
   {}: object
   []: object
   function(){}: function
   

4) operators:
=============

why operators?

we use operators to develop some logic or expression in combination with variables.

1) Arithmatic

We use arithmatic operators to perform some mathematical operations.

   + add
   - subtraction
   * multification
   / devision
   % remainder
   ** exponential
   ++ incremental : It increases 1 at a time.
   __ decremental : It decreases 1 at a time.

2) Assignment (=)

   By using assignment operator we can assign/store value (data) to a variable.
   

3) Comparision

   It compares the two values, the result from this operators will be true/false. 

    1) Rational/Relational

    >
    >=
    <
    <=

   2) Equality 
    
    1) Loose equality (==) It compares only value of variables
    2) Strict equality (===) It compares value and data type of variables

     undefined == null
     undefined === null

   3) Inequality 

     1) Loose inequality (!=)

     The != operator is the inequality operator. It checks whether two values are not equal, regardless of their types. If the values are different, it returns true. If the values are  the same, it returns false. 
    
     2) Strict inequality (!==)

     The !== operator is the strict inequality operator. It checks whether two values are not equal and whether they are of the same type. If the value or the type are different, it returns true; otherwise, it returns false.

   

4) Ternary operator

   We use ternary operator to render content conditionally.

   let age = 15;

   let vote = age >= 18 ? 'Having vote' : 'Not having vote';

   console.log(vote);


5) Logical operator

  In JavaScript, logical AND (&&) and logical OR (||) are operators used to perform logical operations on boolean values or expressions.

  1) logical and && 

  2) logical or ||

  3) ! Operator

     The exclamation mark (!) is the logical NOT operator.

     When used, it converts a true value to false and vice versa.
   
     ! is the logical NOT operator, used for negating boolean values.


8) Funtions
===========

1) What is function?

  =>Function is a block of code which is used to do some task and return value. 
  =>It stores multiple values in functional scope. 
  =>For every function call seperate excution context will be created. 
    For every excution context there are memory creation phase and code excution phase.

2) How can we define function?

    1) Function declaration

    2) Function expression
   
          1) named fucntion expression
          2) anonymous function expression
          3) arrow function (ES-6)
   
3) parameters vs arguments

 Parameters
 ---------

 - Parameters are the placeholders or variables defined in the function's declaration.
 - They are like local variables that store the values passed to the function when it is called.
 - They are defined within the function's parentheses in the function declaration and serve as placeholders for the arguments that will be provided when the function is called.

 Arguments
 ---------
 - Arguments are the actual values passed to a function when it is called.
 - They represent the data that you want to work within the function.
 - Arguments are provided in the function call and are placed inside the parentheses.


4) what is default parameter
   
 - Default parameters were introduced in ECMAScript 6 (ES6).
 - To define default parameters in a function, you assign a default value to a parameter in the function's declaration.
 - Default parameters in JavaScript allow you to specify default values for function parameters.

5) Varying no of parameters or arguments

   If we have varying no of params and arguments then we have to handle with below concepts.

   => arguments object (ES-5)
      -----------------------
      It takes all values at a time and stores in memory.
      This is available in all functions except arrow function.
      arguments object is an iterable object, it has symbol.iterator() method.

   => rest parameter (ES-6)
      ---------------------
      It starts with ...
      It takes all values and stores in array.
      It should be last parameter in parameter list.
          

6) Scope

  1) Global scope
  2) Function / local scope
  3) Block scope

  Note:
  ---- 
  1) var is functionl scope
  2) let, const is block scope


-In Js, "scope" refers to the context in which variables, functions are stored and can be accessed. 
-The scope determines the accessability and lifetime of variables and functions.
-Every execution context will create a new scope.
-Every function call will create new execution context. 

JavaScript has two main types of scope:

Global Scope:
------------

Variables declared or stored outside of any function or block have global scope. They can be accessed from any part of the code, including inside functions and blocks.

Local Scope:
-----------

Variables declared or stored within a function or a block have local scope. They are only accessible within that specific function or block.

Note: 

Local variables take precedence over global variables if they have same name.

Function scope, which means that variables declared with var are only scoped within the function where they are defined.
 
However, with the introduction of let and const in ES6, block scope was introduced. Variables declared with let or const are scoped to the nearest enclosing block (defined by curly braces {}).



7) Hoisting:

  => Hoisting is default behaviour of javascript of moving all variable 
     declarations and function declarations to top of current scope.
  
  => Hoisting lets you allow to access memory value even before execution of code.

In JavaScript, both let and const declarations are hoisted, but they behave differently compared to var declarations.

When you declare a variable using var, it gets hoisted to the top of its scope and is initialized with undefined. However, let and const are also hoisted to the top of their scope, but they are not initialized. This means that you cannot access them before the actual declaration (you'll get a ReferenceError), which is known as the "temporal dead zone."

console.log(x); // undefined
var x = 5;

console.log(y); // ReferenceError: 
let y = 10;

console.log(z); // ReferenceError: z 
const z = 15;

In the above example, x is declared using var, so it gets hoisted and initialized with undefined. y and z are declared using let and const, respectively. While they are hoisted, accessing them before the actual declaration results in a ReferenceError due to the temporal dead zone.


both let and const declarations are hoisted in JavaScript. However, unlike var, they are not initialized with undefined. Instead, they enter a "temporal dead zone" until their declaration is encountered in the code. Attempting to access a variable declared with let or const before its declaration will result in a ReferenceError due to being in this temporal dead zone. This behavior ensures that variables declared with let or const are not accessible before they are defined in the code execution flow.


8) var vs let vs const

                               var                   let                       const
                               ---                   ---                       -----
         
   1) scope                   functional             block                     block

   2) hoisting                yes                    yes but differently       yes but differently

   3) re-declaration          yes                    no                        no

   4) re-assignment           yes                    yes                       no

   5) initialization          no need                no need                   need  


9) Closure:

  =>Closure is a concept in js, it allows to inner function to access outer scope variables even after the outer function execution content is over.
  

10) "This" key word

  - This refers an object.

     Which Object?

     It depends upon scenario. where you are asking 'this'.

  => Regular function scenario.
  => Constructor function scenario.
  => Method in object scenario.

11) Changing of "this" reference.
   
We can change reference of "this" by using below methods.

Arrow functions do not have their own this context; instead, they inherit this from the lexical context. 

So, the use of this in an arrow function will reference the this value of the enclosing lexical scope, whether it's the global scope (e.g., window in a browser) or a function scope.

In the case of arrow functions, if they are defined within another function, they inherit the this value from that surrounding function's context, not from the context where they are called.

    
    ES-5 
    ----

   1) call method =>  call method changes this reference, we can pass any no of arguments                                      to function.

   2) apply method => apply method changes this reference, we have to pass all arguments in array.

   3) bind method =>  Same as call method but it does not call function, it returns function                              reference we have to call function again.

   ES-6
   ----

   4) arrow function => This is the ultimate approach for changing this reference. Arrow funtion get the inherited this value from parent function.



In JavaScript, when you use an arrow function within a constructor function, the this reference in the arrow function will still refer to the surrounding lexical context rather than the instance of the object created by the constructor.

function Person(name) {
  this.name = name;

  // Arrow function within the constructor

  this.printName = () => {
    console.log("My name is " + this.name);
  };
}

const person = new Person("sachin");
person.printName(); // Outputs: My name is sachin


printName is an arrow function defined within the constructor Person.

When printName is called on an instance of Person (person in this case), this.name still correctly refers to the name property of the instance created (sachin in this case). This is because arrow functions inherit the this value from their surrounding lexical context, which in this case is the constructor function Person.
So, to answer your question, the this reference in an arrow function within a constructor function in JavaScript still points to the same this as the constructor function itself, meaning it refers to the instance being created by the constructor.



11) IIFE (Immediately Invocable Function Expression) (ES-5)
-------

    =>An IIFE is a way to excute functions immediately as soon as they are created.
    =>The most usecase of an IIFE is to restrict the scope of variables to local so that they don't pollute the global context(scope).
    =>It helps in making our variables and methods private.
    =>Any function or variable defined inside IIFE can not be accessed outside of the IIFE block, thus preventing global scope from getting polluted.
    =>It's often used to create private variables and functions.
 
12) Function currying?
--------------------

  =>Function currying is a technique of trasforming (converting) a function with multiple parameters into multiple functions with single parameter.
  =>It helps to avoid passing same value again and again.


13) first class function?
------------------------

  =>A programming language is said to have First-class functions when functions in that language are treated like any other variable. 
  =>For example, in such language, a function can be passed as an argument to other functions, can be returned by another function and can be assigned as a value to a variable.


14) heigher order function?
--------------------------
  
  =>A function that receives another function as an argument or that returns a new function or both is called Higher-order function. Higher-order functions are only possible because of     the First-class functions.


15) pure function? 
-----------------

   =>Pure function always returns the same result if the same arguments are passed in. 
   =>It does not depend on any state, or data, change during a program's execution. It must only depend on its input arguments. 
   =>They do not have any side effects like network or database calls and do not modify the arguments which are passed to them.
   =>We can predict the output from pure function.

   
16) impure function?
-------------------

  =>Any function that changes the internal state of one of its arguments or the value of some external variable is an impure function. 
  =>They may have any side effects like network or database calls and it may modify the  arguments which are passed to them.
  =>We can not predict output from impure function.


17) Recursion function:
---------------------

 - A function that calls itself is recursion. Recursion in JavaScript is a recursive call of the function to itself, where the function calls itself, again and again, (recursively) until given  condition becomes false.

calculate factorial:

function factorial(n) {
  if (n <= 0) {
    return 1;
  } else {
    return n * factorial(n - 1);
  }
}

let result = factorial(5);
console.log(result);



